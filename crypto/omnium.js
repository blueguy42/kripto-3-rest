function hex2bin(h) {
    return parseInt(h, 16).toString(2).padStart(8, '0');
}

function bin2hex(b) {
    return parseInt(b, 2).toString(16);
}

function printHexa16bytes(b) {
    for (let i = 0; i < 16; i++) {
        console.log("0x" + b[i].toString(16).padStart(2, '0') + " ");
    }
    console.log();
}

function bytesToChar(b) {
    let str = "";
    for (let i = 0; i < b.length; i++) {
        str += String.fromCharCode(b[i]);
    }
    return str;
}

function charToBytes(c) {
    let arr = [];
    for (let i = 0; i < c.length; i++) {
        arr.push(c.charCodeAt(i));
    }
    return new Uint8Array(arr);
}

function keySchedule(key, num=16) {
    // 128 bit key
    // generates num-1 additional keys, with original key as first key
    // r4Shift then S1Process
    let keys = [];
    if (num > 0) {
      keys.push(key);
    }
    for (let i = 0; i < num - 1; i++) {
      key = r4Shift(key);
      key = S1Process(key);
      keys.push(key);
    }
    return keys;
}
  
function r4Shift(x) {
    // 4-byte (32 bits) right shift of 16 bytes number (or 128 bit)
    let num = BigInt("0x" + Buffer.from(x).toString('hex'));
    let shifted = ((num >> BigInt(32)) & BigInt("0xffffffffffffffffffffffff")) | ((num << BigInt(96)) & (BigInt("0xffffffff") << BigInt(96)));
    return Buffer.from(shifted.toString(16).padStart(32, '0'), 'hex');
}
  
function r4Shift_reverse(x) {
    // reverse of r4Shift
    let num = BigInt("0x" + Buffer.from(x).toString('hex'));
    let shifted = ((num << BigInt(32)) & (BigInt("0xffffffffffffffffffffffff") << BigInt(32))) | ((num >> BigInt(96)) & BigInt("0xffffffff"));
    return Buffer.from(shifted.toString(16).padStart(32, '0'), 'hex');
}

function S1Process(x){
    const S1 = [
        [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
        [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
        [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d],
        [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
        [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
        [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
        [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
        [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
        [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
        [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
        [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
        [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
        [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
        [0x54, 0x7b, 0x94, 0x32, 0xc5, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
        [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
        [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xa6, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b]]

    const bytes = new Uint8Array(16);
    for (let i = 0; i < 16; i++) {
        const hi = x[i] >> 4;
        const lo = x[i] & 0xf;
        bytes[i] = S1[hi][lo];
    }

    return Buffer.from(bytes, 'hex');
}

function S1Process_reverse(x){
    const S1_inv = [
        [0xa3, 0xec, 0xe7, 0xeb, 0x22, 0xab, 0xaf, 0x35, 0x80, 0x51, 0xa7, 0xdb, 0x2e, 0x77, 0xfb, 0xe6],
        [0x3a, 0x12, 0x39, 0xed, 0x2a, 0xc9, 0x67, 0x20, 0xfd, 0x74, 0xf2, 0xff, 0x9c, 0xf4, 0xe2, 0x30],
        [0x07, 0x2d, 0x93, 0xd6, 0x86, 0x8f, 0x27, 0x3c, 0x84, 0xf5, 0x45, 0x21, 0xe1, 0x78, 0x81, 0xb5],
        [0x54, 0x37, 0xd3, 0x33, 0xb8, 0x96, 0x55, 0x9a, 0x57, 0xb2, 0x10, 0x42, 0x4b, 0xd7, 0x02, 0xe5],
        [0x59, 0x13, 0xdc, 0xba, 0xbb, 0xae, 0xca, 0xf0, 0xc2, 0x8b, 0x76, 0x03, 0xd9, 0x43, 0xdf, 0x14],
        [0xc3, 0x71, 0x50, 0x4d, 0xd0, 0x2c, 0x01, 0xcb, 0xaa, 0x3b, 0x0e, 0x89, 0x6a, 0x6c, 0xc8, 0x3f],
        [0x70, 0x4f, 0xfa, 0x2b, 0x63, 0x6d, 0x83, 0x15, 0x65, 0x29, 0x52, 0xef, 0xc0, 0x8c, 0x9f, 0xf8],
        [0xc1, 0xf3, 0x60, 0x1f, 0x92, 0x9d, 0x88, 0x25, 0x0c, 0x06, 0x7a, 0xd1, 0xb0, 0x2f, 0x23, 0x72],
        [0x3d, 0x5c, 0xb3, 0x4c, 0xcf, 0x97, 0x64, 0xb7, 0x34, 0xf7, 0xee, 0x8d, 0xa4, 0xcd, 0xb9, 0xe3],
        [0xa0, 0x11, 0x6f, 0x7c, 0xd2, 0xda, 0x90, 0x18, 0x66, 0x4e, 0x08, 0xb4, 0x7e, 0xce, 0x5b, 0x7b],
        [0x40, 0x82, 0x8a, 0x5a, 0x69, 0x56, 0xf6, 0xcc, 0x32, 0x73, 0xfc, 0xa2, 0x91, 0x95, 0x44, 0xe9],
        [0x47, 0x38, 0x87, 0xad, 0x1d, 0x75, 0x6e, 0xf9, 0xac, 0xc6, 0x24, 0x4a, 0xa5, 0xea, 0xfe, 0x58],
        [0x0a, 0xe8, 0xd5, 0xde, 0xbc, 0xd4, 0x04, 0x36, 0x48, 0x7d, 0xe4, 0xbf, 0x6b, 0x0d, 0x1b, 0x1a],
        [0xe0, 0x8e, 0x05, 0xa6, 0x68, 0x53, 0x26, 0x5e, 0xa1, 0x85, 0xc7, 0x09, 0x16, 0x31, 0xbd, 0x9e],
        [0x41, 0x28, 0x98, 0xb1, 0xa9, 0x79, 0x1e, 0x94, 0x9b, 0xbe, 0x17, 0x49, 0x3e, 0xc5, 0xd8, 0x7f],
        [0x1c, 0xf1, 0x19, 0x5d, 0x0f, 0x46, 0x62, 0xa8, 0x61, 0x99, 0xdd, 0x5f, 0x00, 0xc4, 0x0b, 0xb6]]

    const bytes = new Uint8Array(16);
    for (let i = 0; i < 16; i++) {
        const hi = x[i] >> 4;
        const lo = x[i] & 0xf;
        bytes[i] = S1_inv[hi][lo];
    }

    return Buffer.from(bytes, 'hex');
}

function P1Process(x){
    const P1 = [
        0x7b, 0x74, 0x72, 0x3f, 0x1e, 0x5a, 0x45, 0x00, 0x23, 0x19, 0x13, 0x2e, 0x25, 0x52, 0x43, 0x4c,
        0x35, 0x16, 0x27, 0x6e, 0x42, 0x7d, 0x12, 0x67, 0x10, 0x54, 0x49, 0x2c, 0x06, 0x1f, 0x0a, 0x47,
        0x6d, 0x6b, 0x2f, 0x60, 0x30, 0x4a, 0x2a, 0x36, 0x33, 0x3c, 0x1c, 0x5c, 0x44, 0x57, 0x07, 0x7c,
        0x5b, 0x4b, 0x1a, 0x03, 0x1d, 0x70, 0x7f, 0x73, 0x1b, 0x7a, 0x50, 0x05, 0x04, 0x7e, 0x37, 0x3a,
        0x0c, 0x59, 0x34, 0x39, 0x71, 0x6c, 0x58, 0x0f, 0x02, 0x38, 0x41, 0x53, 0x08, 0x6f, 0x63, 0x56,
        0x29, 0x46, 0x26, 0x3b, 0x22, 0x68, 0x11, 0x76, 0x62, 0x65, 0x64, 0x31, 0x77, 0x78, 0x3e, 0x01,
        0x2d, 0x79, 0x32, 0x0d, 0x48, 0x3d, 0x55, 0x2b, 0x75, 0x5d, 0x20, 0x51, 0x4d, 0x0b, 0x5e, 0x6a,
        0x09, 0x15, 0x4e, 0x21, 0x61, 0x28, 0x14, 0x17, 0x0e, 0x69, 0x18, 0x24, 0x4f, 0x66, 0x40, 0x5f]
    
    let bins = new Uint8Array(128);
    for (let i = 0; i < 16; i++) {
        let bin = x[i].toString(2).padStart(8, '0');
        for (let j = 0; j < 8; j++) {
            bins[i * 8 + j] = bin[j];
        }
    }

    // permutation
    let bins2 = new Uint8Array(128);
    for (let i = 0; i < 128; i++) {
        bins2[i] = bins[P1[i]];
    }
    
    let bytes = new Uint8Array(16);
    for (let i = 0; i < 16; i++) {
        let byte = "";
        for (let j = 0; j < 8; j++) {
            byte += bins2[i * 8 + j];
        }
        byte = parseInt(bin2hex(byte), 16);
        bytes[i] = byte; 
    }
    
    return Buffer.from(bytes, 'hex');
}

function P1Process_reverse(x){
    const P1_inv = [
        0x07, 0x5f, 0x48, 0x33, 0x3c, 0x3b, 0x1c, 0x2e, 0x4c, 0x70, 0x1e, 0x6d, 0x40, 0x63, 0x78, 0x47,
        0x18, 0x56, 0x16, 0x0a, 0x76, 0x71, 0x11, 0x77, 0x7a, 0x09, 0x32, 0x38, 0x2a, 0x34, 0x04, 0x1d,
        0x6a, 0x73, 0x54, 0x08, 0x7b, 0x0c, 0x52, 0x12, 0x75, 0x50, 0x26, 0x67, 0x1b, 0x60, 0x0b, 0x22,
        0x24, 0x5b, 0x62, 0x28, 0x42, 0x10, 0x27, 0x3e, 0x49, 0x43, 0x3f, 0x53, 0x29, 0x65, 0x5e, 0x03,
        0x7e, 0x4a, 0x14, 0x0e, 0x2c, 0x06, 0x51, 0x1f, 0x64, 0x1a, 0x25, 0x31, 0x0f, 0x6c, 0x72, 0x7c,
        0x3a, 0x6b, 0x0d, 0x4b, 0x19, 0x66, 0x4f, 0x2d, 0x46, 0x41, 0x05, 0x30, 0x2b, 0x69, 0x6e, 0x7f,
        0x23, 0x74, 0x58, 0x4e, 0x5a, 0x59, 0x7d, 0x17, 0x55, 0x79, 0x6f, 0x21, 0x45, 0x20, 0x13, 0x4d,
        0x35, 0x44, 0x02, 0x37, 0x01, 0x68, 0x57, 0x5c, 0x5d, 0x61, 0x39, 0x00, 0x2f, 0x15, 0x3d, 0x36]
    
    let bins = new Uint8Array(128);
    for (let i = 0; i < 16; i++) {
        let bin = x[i].toString(2).padStart(8, '0');
        for (let j = 0; j < 8; j++) {
            bins[i * 8 + j] = bin[j];
        }
    }

    // permutation
    let bins2 = new Uint8Array(128);
    for (let i = 0; i < 128; i++) {
        bins2[i] = bins[P1_inv[i]];
    }
    
    let bytes = new Uint8Array(16);
    for (let i = 0; i < 16; i++) {
        let byte = "";
        for (let j = 0; j < 8; j++) {
            byte += bins2[i * 8 + j];
        }
        byte = parseInt(bin2hex(byte), 16);
        bytes[i] = byte; 
    }
    
    return Buffer.from(bytes, 'hex');
}

async function encrypt(plaintext, key, IV='\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0', num_rounds=16) {
    key = charToBytes(key);
    IV = charToBytes(IV);
    if (key.length !== 16 || IV.length !== 16) {
        console.log("ERROR! Key must be 16 bytes long");
        return [];
    }
    plaintext = charToBytes(plaintext);
    console.log("plaintext: ", plaintext)

    // add padding to plaintext to be multiple of 16
    let padding = new Uint8Array(16 - plaintext.length % 16);
    plaintext = new Uint8Array([...plaintext, ...padding]);
    
    // split plaintext into blocks of 16 bytes
    let blocks = [];
    for (let i = 0; i < plaintext.length; i += 16) {
        blocks.push(plaintext.subarray(i, i+16));
    }

    // make 16 keys
    let keys = keySchedule(key, num_rounds);

    // encrypt each block
    for (let k of keys) {
        for (let i = 0; i < blocks.length; i++) {
            if (i == 0) {
                blocks[i] = Buffer.from(blocks[i]).reduce((acc, val, index) => {
                    acc[index] = val ^ IV[index]
                    return acc
                }, Buffer.alloc(16));
            } else {
                blocks[i] = Buffer.from(blocks[i]).reduce((acc, val, index) => {
                    acc[index] = val ^ blocks[i-1][index]
                    return acc
                }, Buffer.alloc(16));
            }
            blocks[i] = Buffer.from(blocks[i]).reduce((acc, val, index) => {
                acc[index] = val ^ k[index]
                return acc
            }, Buffer.alloc(16));

            blocks[i] = P1Process(blocks[i]);
            blocks[i] = r4Shift(blocks[i]);
            blocks[i] = S1Process(blocks[i]);
        }
    }

    // join blocks of 16 bytes into one ciphertext
    let ciphertext = new Uint8Array();
    for (let block of blocks) {
        ciphertext = new Uint8Array([...ciphertext, ...block]);
    }

    ciphertext = Buffer.from(ciphertext, 'hex').toString('base64');

    return ciphertext;
}

async function decrypt(ciphertext, key, IV = '\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0', num_rounds = 16) {
    key = charToBytes(key);
    IV = charToBytes(IV);
    if (key.length !== 16 && IV.length !== 16) {
        console.log("ERROR! Key must be 16 bytes long");
        return [];
    }
    ciphertext = Buffer.from(ciphertext, 'base64').toString('hex');
    ciphertext = new Uint8Array(ciphertext.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));
    // ciphertext = new Uint8Array([
    //     128, 141,  88, 131, 190, 207, 140,
    //     186, 250, 105, 239,  71, 186, 222,
    //     143, 159, 171,  92, 154,  85, 183,
    //      10, 198, 223, 158, 208,  87,  17,
    //       7, 220, 148,  96
    //   ]);
    // split ciphertext into blocks of 16 bytes
    let blocks = [];
    for (let i = 0; i < ciphertext.length; i += 16) {
        blocks.push(ciphertext.subarray(i, i+16));
    }
    let resultingBlock = blocks.slice();

    // make 16 keys
    let keys = keySchedule(key, num_rounds);
    keys = keys.reverse();

    // encrypt each block
    let count = 0;
    for (let k of keys) {
        count++;
        for (let i = 0; i < resultingBlock.length; i++) {
            resultingBlock[i] = S1Process_reverse(blocks[i]);
            resultingBlock[i] = r4Shift_reverse(resultingBlock[i]);
            resultingBlock[i] = P1Process_reverse(resultingBlock[i]);

            resultingBlock[i] = Buffer.from(resultingBlock[i]).reduce((acc, val, index) => {
                acc[index] = val ^ k[index]
                return acc
            }, Buffer.alloc(16));

            if (i === 0) {
                resultingBlock[i] = Buffer.from(resultingBlock[i]).reduce((acc, val, index) => {
                    acc[index] = val ^ IV[index]
                    return acc
                }, Buffer.alloc(16));
            } else {
                resultingBlock[i] = Buffer.from(resultingBlock[i]).reduce((acc, val, index) => {
                    acc[index] = val ^ blocks[i-1][index]
                    return acc
                }, Buffer.alloc(16));
            }
        }
        blocks = resultingBlock.slice();
    }

    // join blocks of 16 bytes into one ciphertext
    let plaintext = new Uint8Array();
    for (let block of resultingBlock) {
        plaintext = new Uint8Array([...plaintext, ...block]);
    }

    // remove 0 padding in behind plaintext
    let padding = 0;
    for (let i = plaintext.length - 1; i >= 0; i--) {
        if (plaintext[i] === 0) {
            padding++;
        } else {
            break;
        }
    }
    plaintext = plaintext.subarray(0, plaintext.length - padding);
    console.log(plaintext);
    plaintext = bytesToChar(plaintext);
    console.log(plaintext);

    return plaintext;
}

module.exports = {
    encrypt,
    decrypt
}